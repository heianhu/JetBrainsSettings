<application>
  <component name="AppStorage">
    <histories>
      <item value="For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf()." />
      <item value="What should we return when needle is an empty string? This is a great question to ask during an interview." />
      <item value="Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack." />
      <item value="Return True if all characters in S are digits" />
      <item value="Return True if there are only decimal characters in S," />
      <item value="Return True if all characters in S are alphanumeric" />
      <item value="digit or a +/- sign. Therefore no valid conversion could be performed." />
      <item value="The first non-whitespace character is 'w', which is not a numerical" />
      <item value="Conversion stops at digit '3' as the next character is not a numerical digit." />
      <item value="Then take as many numerical digits as possible, which gets 42." />
      <item value="The first non-whitespace character is '-', which is the minus sign." />
      <item value="Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned." />
      <item value="Only the space character ' ' is considered as whitespace character." />
      <item value="If no valid conversion could be performed, a zero value is returned." />
      <item value="If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed." />
      <item value="The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function." />
      <item value="The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value." />
      <item value="Implement atoi which converts a string to an integer." />
      <item value="For the purpose of this problem, we define empty string as valid palindrome." />
      <item value="Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases." />
      <item value="Note: For the purpose of this problem, we define empty string as valid palindrome." />
      <item value="What if the inputs contain unicode characters? How would you adapt your solution to such case?" />
      <item value="You may assume the string contains only lowercase alphabets." />
      <item value="Given two strings s and t , write a function to determine if t is an anagram of s." />
      <item value="anagram" />
      <item value="determine" />
      <item value="Note: You may assume the string contain only lowercase letters." />
      <item value="Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1." />
      <item value="For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows." />
      <item value="Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]." />
      <item value="Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows." />
      <item value="Example" />
      <item value="You may assume all the characters consist of printable ascii characters." />
      <item value="Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory." />
      <item value="Write a function that reverses a string. The input string is given as an array of characters char[]." />
      <item value="Do not return anything, modify matrix in-place instead." />
      <item value="You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation." />
      <item value="clockwise" />
      <item value="repetition" />
      <item value="rank" />
      <item value="列" />
      <item value="行列" />
      <item value="Only the filled cells need to be validated according to the mentioned rules." />
      <item value="A Sudoku board (partially filled) could be valid but is not necessarily solvable." />
      <item value="Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid." />
      <item value="Each column must contain the digits 1-9 without repetition." />
      <item value="Each row must contain the digits 1-9 without repetition." />
      <item value="Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:" />
      <item value="You may assume that each input would have exactly one solution, and you may not use the same element twice." />
      <item value="Given an array of integers, return indices of the two numbers such that they add up to a specific target." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="224" />
        <entry key="ENGLISH" value="219" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="5" />
        <entry key="JAPANESE" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="21f11c9eab80f4f2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>