<application>
  <component name="AppStorage">
    <histories>
      <item value="For the purpose of this problem, we define empty string as valid palindrome." />
      <item value="Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases." />
      <item value="Note: For the purpose of this problem, we define empty string as valid palindrome." />
      <item value="What if the inputs contain unicode characters? How would you adapt your solution to such case?" />
      <item value="You may assume the string contains only lowercase alphabets." />
      <item value="Given two strings s and t , write a function to determine if t is an anagram of s." />
      <item value="anagram" />
      <item value="determine" />
      <item value="Note: You may assume the string contain only lowercase letters." />
      <item value="Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1." />
      <item value="For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows." />
      <item value="Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]." />
      <item value="Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows." />
      <item value="Example" />
      <item value="You may assume all the characters consist of printable ascii characters." />
      <item value="Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory." />
      <item value="Write a function that reverses a string. The input string is given as an array of characters char[]." />
      <item value="Do not return anything, modify matrix in-place instead." />
      <item value="You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation." />
      <item value="clockwise" />
      <item value="repetition" />
      <item value="rank" />
      <item value="列" />
      <item value="行列" />
      <item value="Only the filled cells need to be validated according to the mentioned rules." />
      <item value="A Sudoku board (partially filled) could be valid but is not necessarily solvable." />
      <item value="Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid." />
      <item value="Each column must contain the digits 1-9 without repetition." />
      <item value="Each row must contain the digits 1-9 without repetition." />
      <item value="Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:" />
      <item value="You may assume that each input would have exactly one solution, and you may not use the same element twice." />
      <item value="Given an array of integers, return indices of the two numbers such that they add up to a specific target." />
      <item value="You must do this in-place without making a copy of the array. Minimize the total number of operations." />
      <item value="Minimize the total number of operations." />
      <item value="You must do this in-place without making a copy of the array." />
      <item value="Do not return anything, modify nums in-place instead." />
      <item value="You may assume the integer does not contain any leading zero, except the number 0 itself." />
      <item value="The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit." />
      <item value="Given a non-empty array of digits representing a non-negative integer, plus one to the integer." />
      <item value="What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?" />
      <item value="What if nums1's size is small compared to nums2's size? Which algorithm is better?" />
      <item value="What if the given array is already sorted? How would you optimize your algorithm?" />
      <item value="Each element in the result should appear as many times as it shows in both arrays. The result can be in any order." />
      <item value="intersection" />
      <item value="every element appears twice except for one. Find that single one." />
      <item value="Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?" />
      <item value="Given a non-empty array of integers, every element appears twice except for one. Find that single one." />
      <item value="Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct." />
      <item value="profit" />
      <item value="Say you have an array for which the ith element is the price of a given stock on day i." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="205" />
        <entry key="ENGLISH" value="200" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="5" />
        <entry key="JAPANESE" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="21f11c9eab80f4f2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>