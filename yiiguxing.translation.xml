<application>
  <component name="AppStorage">
    <histories>
      <item value="comment" />
      <item value="tuple index out of range" />
      <item value="topic" />
      <item value="Expected axis has 8 elements, new values have 6 elements" />
      <item value="Invalid" />
      <item value="origin" />
      <item value="common" />
      <item value="预警" />
      <item value="subject" />
      <item value="权重" />
      <item value="weight" />
      <item value="dim" />
      <item value="Sentiment" />
      <item value="You are not allowed to push code to protected branches on this project." />
      <item value="official" />
      <item value="template" />
      <item value="recent" />
      <item value="状态" />
      <item value="I can be placed before V (5) and X (10) to make 4 and 9." />
      <item value="The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:" />
      <item value="Because the one is before the five we subtract it making four." />
      <item value="Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII." />
      <item value="Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M." />
      <item value="Could you do it without using any loop / recursion?" />
      <item value="Given an integer, write a function to determine if it is a power of three." />
      <item value="Count the number of prime numbers less than a non-negative number, n." />
      <item value="prime numbers" />
      <item value="prime" />
      <item value="But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”." />
      <item value="Write a program that outputs the string representation of numbers from 1 to n." />
      <item value="Design a stack that supports push, pop, top, and retrieving the minimum element in constant time." />
      <item value="initialize your data structure here." />
      <item value="Retrieve the minimum element in the stack." />
      <item value="Removes the element on top of the stack." />
      <item value="and retrieving the minimum element in constant time." />
      <item value="Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned." />
      <item value="Your Solution object will be instantiated and called as such:" />
      <item value="Resets the array back to its original configuration [1,2,3]." />
      <item value="Shuffle a set of numbers without duplicates." />
      <item value="Resets the array to its original configuration and return it." />
      <item value="Returns the random shuffling of array [1,2,3]." />
      <item value="Any permutation of [1,2,3] must equally likely to be returned." />
      <item value="Shuffle" />
      <item value="Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police." />
      <item value="robbing" />
      <item value="You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night." />
      <item value="If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle." />
      <item value="Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum." />
      <item value="If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit." />
      <item value="Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times)." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="309" />
        <entry key="ENGLISH" value="347" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="5" />
        <entry key="JAPANESE" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="21f11c9eab80f4f2" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>